{"version":3,"sources":["../../src/lib/select.ts"],"sourcesContent":["import * as React from 'react';\nimport { SelectType } from '../components/Select/Select';\nimport { getTitleFromChildren } from './utils';\n\ntype Option = {\n  label?: React.ReactElement | string;\n  [index: string]: any;\n};\n\nconst findAllIncludes = (target = '', search = '') => {\n  const includes = [];\n\n  let i = target.indexOf(search);\n  while (i !== -1) {\n    includes.push(i);\n    i = target.indexOf(search, i + 1);\n  }\n\n  return includes;\n};\n\nlet letterRegexp: RegExp;\n\n// На момент написания флаг u не поддерживался рядом браузеров, поэтому добавили фоллбэк.\ntry {\n  letterRegexp = new RegExp('\\\\p{L}', 'u');\n} catch (e) {}\n\ntype GetOptionLabel<T> = (option: Partial<T>) => string | undefined;\n\nconst _getOptionLabel: GetOptionLabel<Option> = (option) => getTitleFromChildren(option.label);\n\nexport const defaultFilterFn = <T>(\n  query = '',\n  option: T,\n  getOptionLabel: GetOptionLabel<T> = _getOptionLabel,\n) => {\n  query = query.toLocaleLowerCase();\n  let label = getOptionLabel(option)?.toLocaleLowerCase();\n\n  if (label?.startsWith(query)) {\n    return true;\n  }\n\n  const includes = findAllIncludes(label, query);\n\n  // Ищем вхождение перед началом которого не буква\n  if (letterRegexp && label) {\n    for (const index of includes) {\n      if (!letterRegexp.test(label[index - 1])) {\n        return true;\n      }\n    }\n  } else {\n    // если regexp не поддерживается, то ищем любое вхождение\n    return includes.length > 0;\n  }\n\n  return false;\n};\n\nexport const getFormFieldModeFromSelectType = (selectType: SelectType = 'default') => {\n  return selectType === 'default' ? 'default' : 'plain';\n};\n"],"names":["React","getTitleFromChildren","findAllIncludes","target","search","includes","i","indexOf","push","letterRegexp","RegExp","e","_getOptionLabel","option","label","defaultFilterFn","query","getOptionLabel","toLocaleLowerCase","startsWith","index","test","length","getFormFieldModeFromSelectType","selectType"],"mappings":"AAAA,YAAYA,WAAW,QAAQ;AAE/B,SAASC,oBAAoB,QAAQ,UAAU;AAO/C,IAAMC,kBAAkB;QAACC,0EAAS,IAAIC,0EAAS;IAC7C,IAAMC,WAAW,EAAE;IAEnB,IAAIC,IAAIH,OAAOI,OAAO,CAACH;IACvB,MAAOE,MAAM,CAAC,EAAG;QACfD,SAASG,IAAI,CAACF;QACdA,IAAIH,OAAOI,OAAO,CAACH,QAAQE,IAAI;IACjC;IAEA,OAAOD;AACT;AAEA,IAAII;AAEJ,yFAAyF;AACzF,IAAI;IACFA,eAAe,IAAIC,OAAO,UAAU;AACtC,EAAE,OAAOC,GAAG,CAAC;AAIb,IAAMC,kBAA0C,SAACC;WAAWZ,qBAAqBY,OAAOC,KAAK;;AAE7F,OAAO,IAAMC,kBAAkB;QAC7BC,yEAAQ,IACRH,uDACAI,kFAAoCL;QAGxBK;IADZD,QAAQA,MAAME,iBAAiB;IAC/B,IAAIJ,SAAQG,mBAAAA,eAAeJ,qBAAfI,uCAAAA,iBAAwBC,iBAAiB;IAErD,IAAIJ,kBAAAA,4BAAAA,MAAOK,UAAU,CAACH,QAAQ;QAC5B,OAAO;IACT;IAEA,IAAMX,WAAWH,gBAAgBY,OAAOE;IAExC,iDAAiD;IACjD,IAAIP,gBAAgBK,OAAO;YACpB,kCAAA,2BAAA;;YAAL,QAAK,YAAeT,6BAAf,SAAA,6BAAA,QAAA,yBAAA,iCAAyB;gBAAzB,IAAMe,QAAN;gBACH,IAAI,CAACX,aAAaY,IAAI,CAACP,KAAK,CAACM,QAAQ,EAAE,GAAG;oBACxC,OAAO;gBACT;YACF;;YAJK;YAAA;;;qBAAA,6BAAA;oBAAA;;;oBAAA;0BAAA;;;;IAKP,OAAO;QACL,yDAAyD;QACzD,OAAOf,SAASiB,MAAM,GAAG;IAC3B;IAEA,OAAO;AACT,EAAE;AAEF,OAAO,IAAMC,iCAAiC;QAACC,8EAAyB;IACtE,OAAOA,eAAe,YAAY,YAAY;AAChD,EAAE"}