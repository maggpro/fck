{"version":3,"sources":["../../../src/lib/calendar.ts"],"sourcesContent":["import {\n  addDays,\n  addWeeks,\n  eachDayOfInterval,\n  endOfMonth,\n  endOfWeek,\n  isAfter,\n  isBefore,\n  isFirstDayOfMonth,\n  isLastDayOfMonth,\n  isSameDay,\n  startOfMonth,\n  startOfWeek,\n  subDays,\n  subWeeks,\n} from './date';\n\nexport const getYears = (currentYear: number, range: number) => {\n  const years: Array<{\n    value: number;\n    label: string;\n  }> = [];\n\n  for (let i = currentYear - range; i <= currentYear + range; i++) {\n    years.push({ label: String(i).padStart(4, '0'), value: i });\n  }\n\n  return years;\n};\n\nexport const getMonths = (locale?: string) => {\n  const months: Array<{\n    value: number;\n    label: string;\n  }> = [];\n  const formatter = new Intl.DateTimeFormat(locale, {\n    month: 'long',\n  });\n\n  for (let i = 0; i < 12; i++) {\n    months.push({\n      label: formatter.format(new Date('1970-01-01').setMonth(i)),\n      value: i,\n    });\n  }\n\n  return months;\n};\n\nexport const getDaysNames = (\n  now: Date,\n  weekStartsOn: 0 | 1 | 2 | 3 | 4 | 5 | 6,\n  locale?: string,\n) => {\n  const formatter = new Intl.DateTimeFormat(locale, {\n    weekday: 'short',\n  });\n  return eachDayOfInterval(startOfWeek(now, weekStartsOn), endOfWeek(now, weekStartsOn)).map(\n    (day) => formatter.format(day),\n  );\n};\n\nexport const navigateDate = (date?: Date | null, key?: string) => {\n  let newDate = date ?? new Date();\n\n  switch (key) {\n    case 'ArrowRight':\n      newDate = addDays(newDate, 1);\n      break;\n    case 'ArrowLeft':\n      newDate = subDays(newDate, 1);\n      break;\n    case 'ArrowUp':\n      newDate = subWeeks(newDate, 1);\n      break;\n    case 'ArrowDown':\n      newDate = addWeeks(newDate, 1);\n      break;\n  }\n\n  return newDate;\n};\n\nexport const getWeeks = (viewDate: Date, weekStartsOn: 0 | 1 | 2 | 3 | 4 | 5 | 6) => {\n  const start = startOfWeek(startOfMonth(viewDate), weekStartsOn);\n  const end = endOfWeek(endOfMonth(viewDate), weekStartsOn);\n\n  let count = 0;\n  let current = start;\n  const nestedWeeks: Date[][] = [];\n  let lastDay = null;\n  while (isBefore(current, end)) {\n    const weekNumber = Math.floor(count / 7);\n    nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];\n    const day = current.getDay();\n    if (lastDay !== day) {\n      lastDay = day;\n      nestedWeeks[weekNumber].push(current);\n      count += 1;\n    }\n    current = addDays(current, 1);\n  }\n  return nestedWeeks;\n};\n\nexport const setTimeEqual = (to: Date, from?: Date | null) => {\n  if (from) {\n    to.setHours(from.getHours());\n    to.setMinutes(from.getMinutes());\n    to.setSeconds(from.getSeconds());\n    to.setMilliseconds(from.getMilliseconds());\n  }\n\n  return to;\n};\n\nexport const isFirstDay = (day: Date, dayOfWeek: number) =>\n  dayOfWeek === 0 || isFirstDayOfMonth(day);\n\nexport const isLastDay = (day: Date, dayOfWeek: number) => dayOfWeek === 6 || isLastDayOfMonth(day);\n\n/**\n * Возвращает дату, ограниченную `min` и/или `max` значениями\n */\nexport function clamp(day: Date, options: { min?: Date; max?: Date } = {}) {\n  const { min, max } = options;\n  if (min && isBefore(day, min)) {\n    return min;\n  }\n  if (max && isAfter(day, max)) {\n    return max;\n  }\n  return day;\n}\n\n/**\n * Позволяет определить удовлетворяет ли исходная дата заданным ограничения `min` и/или `max`\n */\nexport function isDayMinMaxRestricted(\n  day: Date,\n  options: { min?: Date; max?: Date; withTime?: boolean } = {},\n) {\n  const { min, max, withTime = false } = options;\n  if (!withTime && ((min && isSameDay(day, min)) || (max && isSameDay(day, max)))) {\n    return false;\n  }\n  return Boolean((min && isBefore(day, min)) || (max && isAfter(day, max)));\n}\n"],"names":["clamp","getDaysNames","getMonths","getWeeks","getYears","isDayMinMaxRestricted","isFirstDay","isLastDay","navigateDate","setTimeEqual","currentYear","range","years","i","push","label","String","padStart","value","locale","months","formatter","Intl","DateTimeFormat","month","format","Date","setMonth","now","weekStartsOn","weekday","eachDayOfInterval","startOfWeek","endOfWeek","map","day","date","key","newDate","addDays","subDays","subWeeks","addWeeks","viewDate","start","startOfMonth","end","endOfMonth","count","current","nestedWeeks","lastDay","isBefore","weekNumber","Math","floor","getDay","to","from","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","setMilliseconds","getMilliseconds","dayOfWeek","isFirstDayOfMonth","isLastDayOfMonth","options","min","max","isAfter","withTime","isSameDay","Boolean"],"mappings":";;;;;;;;;;;IA4HgBA,KAAK;eAALA;;IA3EHC,YAAY;eAAZA;;IAnBAC,SAAS;eAATA;;IAqDAC,QAAQ;eAARA;;IAlEAC,QAAQ;eAARA;;IAyHGC,qBAAqB;eAArBA;;IAtBHC,UAAU;eAAVA;;IAGAC,SAAS;eAATA;;IAzDAC,YAAY;eAAZA;;IA2CAC,YAAY;eAAZA;;;oBA1FN;AAEA,IAAML,WAAW,SAACM,aAAqBC;IAC5C,IAAMC,QAGD,EAAE;IAEP,IAAK,IAAIC,IAAIH,cAAcC,OAAOE,KAAKH,cAAcC,OAAOE,IAAK;QAC/DD,MAAME,IAAI,CAAC;YAAEC,OAAOC,OAAOH,GAAGI,QAAQ,CAAC,GAAG;YAAMC,OAAOL;QAAE;IAC3D;IAEA,OAAOD;AACT;AAEO,IAAMV,YAAY,SAACiB;IACxB,IAAMC,SAGD,EAAE;IACP,IAAMC,YAAY,IAAIC,KAAKC,cAAc,CAACJ,QAAQ;QAChDK,OAAO;IACT;IAEA,IAAK,IAAIX,IAAI,GAAGA,IAAI,IAAIA,IAAK;QAC3BO,OAAON,IAAI,CAAC;YACVC,OAAOM,UAAUI,MAAM,CAAC,IAAIC,KAAK,cAAcC,QAAQ,CAACd;YACxDK,OAAOL;QACT;IACF;IAEA,OAAOO;AACT;AAEO,IAAMnB,eAAe,SAC1B2B,KACAC,cACAV;IAEA,IAAME,YAAY,IAAIC,KAAKC,cAAc,CAACJ,QAAQ;QAChDW,SAAS;IACX;IACA,OAAOC,IAAAA,uBAAiB,EAACC,IAAAA,iBAAW,EAACJ,KAAKC,eAAeI,IAAAA,eAAS,EAACL,KAAKC,eAAeK,GAAG,CACxF,SAACC;eAAQd,UAAUI,MAAM,CAACU;;AAE9B;AAEO,IAAM3B,eAAe,SAAC4B,MAAoBC;IAC/C,IAAIC,UAAUF,iBAAAA,kBAAAA,OAAQ,IAAIV;IAE1B,OAAQW;QACN,KAAK;YACHC,UAAUC,IAAAA,aAAO,EAACD,SAAS;YAC3B;QACF,KAAK;YACHA,UAAUE,IAAAA,aAAO,EAACF,SAAS;YAC3B;QACF,KAAK;YACHA,UAAUG,IAAAA,cAAQ,EAACH,SAAS;YAC5B;QACF,KAAK;YACHA,UAAUI,IAAAA,cAAQ,EAACJ,SAAS;YAC5B;IACJ;IAEA,OAAOA;AACT;AAEO,IAAMnC,WAAW,SAACwC,UAAgBd;IACvC,IAAMe,QAAQZ,IAAAA,iBAAW,EAACa,IAAAA,kBAAY,EAACF,WAAWd;IAClD,IAAMiB,MAAMb,IAAAA,eAAS,EAACc,IAAAA,gBAAU,EAACJ,WAAWd;IAE5C,IAAImB,QAAQ;IACZ,IAAIC,UAAUL;IACd,IAAMM,cAAwB,EAAE;IAChC,IAAIC,UAAU;IACd,MAAOC,IAAAA,cAAQ,EAACH,SAASH,KAAM;QAC7B,IAAMO,aAAaC,KAAKC,KAAK,CAACP,QAAQ;QACtCE,WAAW,CAACG,WAAW,GAAGH,WAAW,CAACG,WAAW,IAAI,EAAE;QACvD,IAAMlB,MAAMc,QAAQO,MAAM;QAC1B,IAAIL,YAAYhB,KAAK;YACnBgB,UAAUhB;YACVe,WAAW,CAACG,WAAW,CAACvC,IAAI,CAACmC;YAC7BD,SAAS;QACX;QACAC,UAAUV,IAAAA,aAAO,EAACU,SAAS;IAC7B;IACA,OAAOC;AACT;AAEO,IAAMzC,eAAe,SAACgD,IAAUC;IACrC,IAAIA,MAAM;QACRD,GAAGE,QAAQ,CAACD,KAAKE,QAAQ;QACzBH,GAAGI,UAAU,CAACH,KAAKI,UAAU;QAC7BL,GAAGM,UAAU,CAACL,KAAKM,UAAU;QAC7BP,GAAGQ,eAAe,CAACP,KAAKQ,eAAe;IACzC;IAEA,OAAOT;AACT;AAEO,IAAMnD,aAAa,SAAC6B,KAAWgC;WACpCA,cAAc,KAAKC,IAAAA,uBAAiB,EAACjC;;AAEhC,IAAM5B,YAAY,SAAC4B,KAAWgC;WAAsBA,cAAc,KAAKE,IAAAA,sBAAgB,EAAClC;;AAKxF,SAASnC,MAAMmC,GAAS;QAAEmC,UAAAA,iEAAsC,CAAC;IACtE,IAAQC,MAAaD,QAAbC,KAAKC,MAAQF,QAARE;IACb,IAAID,OAAOnB,IAAAA,cAAQ,EAACjB,KAAKoC,MAAM;QAC7B,OAAOA;IACT;IACA,IAAIC,OAAOC,IAAAA,aAAO,EAACtC,KAAKqC,MAAM;QAC5B,OAAOA;IACT;IACA,OAAOrC;AACT;AAKO,SAAS9B,sBACd8B,GAAS;QACTmC,UAAAA,iEAA0D,CAAC;IAE3D,IAAQC,MAA+BD,QAA/BC,KAAKC,MAA0BF,QAA1BE,yBAA0BF,QAArBI,UAAAA,0CAAW;IAC7B,IAAI,CAACA,YAAa,CAAA,AAACH,OAAOI,IAAAA,eAAS,EAACxC,KAAKoC,QAAUC,OAAOG,IAAAA,eAAS,EAACxC,KAAKqC,IAAI,GAAI;QAC/E,OAAO;IACT;IACA,OAAOI,QAAQ,AAACL,OAAOnB,IAAAA,cAAQ,EAACjB,KAAKoC,QAAUC,OAAOC,IAAAA,aAAO,EAACtC,KAAKqC;AACrE"}