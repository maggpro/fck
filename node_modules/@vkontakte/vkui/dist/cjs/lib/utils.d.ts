import * as React from 'react';
export type ImgOnlyAttributes = {
    [index in Exclude<keyof React.ImgHTMLAttributes<HTMLImageElement>, keyof React.HTMLAttributes<HTMLImageElement>>]: React.ImgHTMLAttributes<HTMLImageElement>[index];
};
export declare function debounce<A extends any[]>(fn: (...args: A) => void, delay: number): (...args: A) => void;
export declare function setRef<T>(element: T, ref?: React.Ref<T>): void;
export declare function multiRef<T>(...refs: Array<React.Ref<T> | undefined>): React.RefObject<T>;
export declare function getTitleFromChildren(children: React.ReactNode): string;
export declare const stopPropagation: <T extends React.SyntheticEvent<Element, Event>>(event: T) => void;
export declare function addClassNameToElement(element: HTMLElement, className: string): void;
export declare function removeClassNameFromElement(element: HTMLElement, classNameToRemove: string): void;
type ExcludeKeysWithUndefined<T> = {
    [P in keyof T]?: Exclude<T[P], undefined>;
};
export declare const excludeKeysWithUndefined: <T extends Record<string | number | symbol, any>>(obj: T) => ExcludeKeysWithUndefined<T>;
export {};
//# sourceMappingURL=utils.d.ts.map