{"version":3,"sources":["../../../../../src/components/Slider/SliderThumb/SliderThumb.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { useBooleanState } from '../../../hooks/useBooleanState';\nimport { useExternRef } from '../../../hooks/useExternRef';\nimport { useFocusVisible } from '../../../hooks/useFocusVisible';\nimport { useFocusVisibleClassName } from '../../../hooks/useFocusVisibleClassName';\nimport {\n  arrowMiddleware,\n  convertFloatingDataToReactCSSProperties,\n  flipMiddleware,\n  offsetMiddleware,\n  shiftMiddleware,\n  useFloating,\n} from '../../../lib/floating';\nimport type { HasDataAttribute, HasRootRef } from '../../../types';\nimport { TooltipBase } from '../../TooltipBase/TooltipBase';\nimport styles from './SliderThumb.module.css';\n\ninterface SliderThumbProps extends HasRootRef<HTMLSpanElement>, HasDataAttribute {\n  className?: string;\n  style?: React.CSSProperties;\n  inputProps?: React.InputHTMLAttributes<HTMLInputElement> &\n    React.RefAttributes<HTMLInputElement> &\n    HasDataAttribute;\n  withTooltip?: boolean;\n}\n\nexport const SliderThumb = ({\n  className,\n  getRootRef,\n  inputProps,\n  withTooltip,\n  ...restProps\n}: SliderThumbProps) => {\n  const { focusVisible, onBlur, onFocus } = useFocusVisible(false);\n  const focusVisibleClassNames = useFocusVisibleClassName({\n    focusVisible,\n    mode: styles['SliderThumb--focus-visible'],\n  });\n  const [arrowRef, setArrowRef] = React.useState<HTMLDivElement | null>(null);\n\n  const memoizedMiddlewares = React.useMemo(() => {\n    return [\n      offsetMiddleware({\n        crossAxis: 0,\n        mainAxis: 15,\n      }),\n      flipMiddleware(),\n      shiftMiddleware({ padding: 8 }),\n      arrowMiddleware({\n        element: arrowRef,\n      }),\n    ];\n  }, [arrowRef]);\n\n  const {\n    x: floatingDataX,\n    y: floatingDataY,\n    placement: resolvedPlacement,\n    refs,\n    strategy: floatingPositionStrategy,\n    middlewareData: { arrow: arrowCoords },\n    update: updateTooltipPosition,\n  } = useFloating({\n    placement: 'top',\n    middleware: memoizedMiddlewares,\n  });\n\n  const {\n    value: isHovered,\n    setTrue: setHoveredTrue,\n    setFalse: setHoveredFalse,\n  } = useBooleanState(false);\n\n  const handleRootRef = useExternRef<HTMLSpanElement>(getRootRef, refs.setReference);\n\n  const shouldShowTooltip = withTooltip && (focusVisible || isHovered);\n\n  const inputValue = inputProps && inputProps.value;\n  React.useEffect(\n    function udpateTooltipPositionOnValueChange() {\n      if (shouldShowTooltip && inputValue !== 'undefined') {\n        updateTooltipPosition();\n      }\n    },\n    [inputValue, updateTooltipPosition, shouldShowTooltip],\n  );\n\n  return (\n    <React.Fragment>\n      <span\n        {...restProps}\n        ref={handleRootRef}\n        onMouseEnter={setHoveredTrue}\n        onMouseLeave={setHoveredFalse}\n        className={classNames(styles['SliderThumb'], focusVisibleClassNames, className)}\n      >\n        <input\n          {...inputProps}\n          type=\"range\"\n          className={styles['SliderThumb__nativeInput']}\n          aria-orientation=\"horizontal\"\n          onBlur={onBlur}\n          onFocus={onFocus}\n        />\n      </span>\n      {shouldShowTooltip && (\n        <TooltipBase\n          appearance=\"neutral\"\n          getRootRef={refs.setFloating}\n          floatingStyle={convertFloatingDataToReactCSSProperties(\n            floatingPositionStrategy,\n            floatingDataX,\n            floatingDataY,\n          )}\n          arrowCoords={arrowCoords}\n          arrowPlacement={resolvedPlacement}\n          getArrowRef={setArrowRef}\n          text={inputValue}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n"],"names":["SliderThumb","className","getRootRef","inputProps","withTooltip","restProps","useFocusVisible","focusVisible","onBlur","onFocus","focusVisibleClassNames","useFocusVisibleClassName","mode","React","useState","arrowRef","setArrowRef","memoizedMiddlewares","useMemo","offsetMiddleware","crossAxis","mainAxis","flipMiddleware","shiftMiddleware","padding","arrowMiddleware","element","useFloating","placement","middleware","x","floatingDataX","y","floatingDataY","resolvedPlacement","refs","strategy","floatingPositionStrategy","middlewareData","arrow","arrowCoords","update","updateTooltipPosition","useBooleanState","value","isHovered","setTrue","setHoveredTrue","setFalse","setHoveredFalse","handleRootRef","useExternRef","setReference","shouldShowTooltip","inputValue","useEffect","udpateTooltipPositionOnValueChange","Fragment","span","ref","onMouseEnter","onMouseLeave","classNames","input","type","aria-orientation","TooltipBase","appearance","setFloating","floatingStyle","convertFloatingDataToReactCSSProperties","arrowPlacement","getArrowRef","text"],"mappings":";;;;+BA2BaA;;;eAAAA;;;;;;;;+DA3BU;oBACI;+BACK;4BACH;+BACG;wCACS;wBAQlC;2BAEqB;AAYrB,IAAMA,cAAc;QACzBC,mBAAAA,WACAC,oBAAAA,YACAC,oBAAAA,YACAC,qBAAAA,aACGC;QAJHJ;QACAC;QACAC;QACAC;;IAGA,IAA0CE,oBAAAA,IAAAA,gCAAe,EAAC,QAAlDC,eAAkCD,kBAAlCC,cAAcC,SAAoBF,kBAApBE,QAAQC,UAAYH,kBAAZG;IAC9B,IAAMC,yBAAyBC,IAAAA,kDAAwB,EAAC;QACtDJ,cAAAA;QACAK,IAAI;IACN;IACA,IAAgCC,qCAAAA,OAAMC,QAAQ,CAAwB,WAA/DC,WAAyBF,oBAAfG,cAAeH;IAEhC,IAAMI,sBAAsBJ,OAAMK,OAAO,CAAC;QACxC,OAAO;YACLC,IAAAA,0BAAgB,EAAC;gBACfC,WAAW;gBACXC,UAAU;YACZ;YACAC,IAAAA,wBAAc;YACdC,IAAAA,yBAAe,EAAC;gBAAEC,SAAS;YAAE;YAC7BC,IAAAA,yBAAe,EAAC;gBACdC,SAASX;YACX;SACD;IACH,GAAG;QAACA;KAAS;IAEb,IAQIY,eAAAA,IAAAA,qBAAW,EAAC;QACdC,WAAW;QACXC,YAAYZ;IACd,IAVEa,AAAGC,gBAODJ,aAPFG,GACAE,AAAGC,gBAMDN,aANFK,GACAJ,AAAWM,oBAKTP,aALFC,WACAO,OAIER,aAJFQ,MACAC,AAAUC,2BAGRV,aAHFS,wCAGET,aAFFW,gBAAkBC,AAAOC,0CAAPD,OAClBE,AAAQC,wBACNf,aADFc;IAMF,IAIIE,oBAAAA,IAAAA,gCAAe,EAAC,QAHlBC,AAAOC,YAGLF,kBAHFC,OACAE,AAASC,iBAEPJ,kBAFFG,SACAE,AAAUC,kBACRN,kBADFK;IAGF,IAAME,gBAAgBC,IAAAA,0BAAY,EAAkBjD,YAAYiC,KAAKiB,YAAY;IAEjF,IAAMC,oBAAoBjD,eAAgBG,CAAAA,gBAAgBsC,SAAQ;IAElE,IAAMS,aAAanD,cAAcA,WAAWyC,KAAK;IACjD/B,OAAM0C,SAAS,CACb,SAASC;QACP,IAAIH,qBAAqBC,eAAe,aAAa;YACnDZ;QACF;IACF,GACA;QAACY;QAAYZ;QAAuBW;KAAkB;IAGxD,qBACE,qBAACxC,OAAM4C,QAAQ,sBACb,qBAACC,oDACKrD;QACJsD,KAAKT;QACLU,cAAcb;QACdc,cAAcZ;QACdhD,WAAW6D,IAAAA,gBAAU,qBAAwBpD,wBAAwBT;sBAErE,qBAAC8D,qDACK5D;QACJ6D,MAAK;QACL/D,SAAS;QACTgE,oBAAiB;QACjBzD,QAAQA;QACRC,SAASA;UAGZ4C,mCACC,qBAACa,wBAAW;QACVC,YAAW;QACXjE,YAAYiC,KAAKiC,WAAW;QAC5BC,eAAeC,IAAAA,iDAAuC,EACpDjC,0BACAN,eACAE;QAEFO,aAAaA;QACb+B,gBAAgBrC;QAChBsC,aAAaxD;QACbyD,MAAMnB;;AAKhB"}