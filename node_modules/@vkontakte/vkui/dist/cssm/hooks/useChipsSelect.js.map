{"version":3,"sources":["../../../src/hooks/useChipsSelect.ts"],"sourcesContent":["import * as React from 'react';\nimport { ChipOption } from '../components/Chip/Chip';\nimport { ChipsSelectProps } from '../components/ChipsSelect/ChipsSelect';\nimport { useChipsInput } from './useChipsInput';\n\nexport const useChipsSelect = <Option extends ChipOption>(\n  props: Partial<ChipsSelectProps<Option>>,\n) => {\n  const { options, filterFn, getOptionLabel, getOptionValue, showSelected } = props;\n\n  const [opened, setOpened] = React.useState(false);\n  const [focusedOptionIndex, setFocusedOptionIndex] = React.useState<number | null>(0);\n  const [focusedOption, setFocusedOption] = React.useState<Option | null>(null);\n\n  const { fieldValue, selectedOptions, ...chipsInputState } = useChipsInput(props);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement> | undefined) => {\n    if (!e) {\n      return;\n    }\n    chipsInputState.handleInputChange(e);\n\n    if (!opened) {\n      setOpened(true);\n      setFocusedOptionIndex(0);\n    }\n  };\n\n  let filteredOptions = React.useMemo(() => {\n    return filterFn\n      ? options!.filter((option) => filterFn(fieldValue, option, getOptionLabel))\n      : (options as Option[]);\n  }, [options, filterFn, fieldValue, getOptionLabel]);\n\n  filteredOptions = React.useMemo(\n    function filterOutSelectedIfNeeded() {\n      if (!filteredOptions.length || showSelected) {\n        return filteredOptions;\n      }\n\n      const filteredSet = new Set(filteredOptions);\n      const selected = selectedOptions.map((item) => getOptionValue!(item));\n\n      for (const item of filteredSet) {\n        if (selected.includes(getOptionValue!(item))) {\n          filteredSet.delete(item);\n        }\n      }\n\n      return [...filteredSet];\n    },\n    [filteredOptions, selectedOptions, getOptionValue, showSelected],\n  );\n\n  return {\n    ...chipsInputState,\n    fieldValue,\n    handleInputChange,\n    opened,\n    setOpened,\n    filteredOptions,\n    focusedOptionIndex,\n    setFocusedOptionIndex,\n    focusedOption,\n    setFocusedOption,\n    selectedOptions,\n  };\n};\n"],"names":["React","useChipsInput","useChipsSelect","props","options","filterFn","getOptionLabel","getOptionValue","showSelected","opened","setOpened","useState","focusedOptionIndex","setFocusedOptionIndex","focusedOption","setFocusedOption","fieldValue","selectedOptions","chipsInputState","handleInputChange","e","filteredOptions","useMemo","filter","option","filterOutSelectedIfNeeded","length","filteredSet","Set","selected","map","item","includes","delete"],"mappings":"AAAA,YAAYA,WAAW,QAAQ;AAG/B,SAASC,aAAa,QAAQ,kBAAkB;AAEhD,OAAO,MAAMC,iBAAiB,CAC5BC;IAEA,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,cAAc,EAAEC,cAAc,EAAEC,YAAY,EAAE,GAAGL;IAE5E,MAAM,CAACM,QAAQC,UAAU,GAAGV,MAAMW,QAAQ,CAAC;IAC3C,MAAM,CAACC,oBAAoBC,sBAAsB,GAAGb,MAAMW,QAAQ,CAAgB;IAClF,MAAM,CAACG,eAAeC,iBAAiB,GAAGf,MAAMW,QAAQ,CAAgB;IAExE,MAAM,EAAEK,UAAU,EAAEC,eAAe,EAAE,GAAGC,iBAAiB,GAAGjB,cAAcE;IAE1E,MAAMgB,oBAAoB,CAACC;QACzB,IAAI,CAACA,GAAG;YACN;QACF;QACAF,gBAAgBC,iBAAiB,CAACC;QAElC,IAAI,CAACX,QAAQ;YACXC,UAAU;YACVG,sBAAsB;QACxB;IACF;IAEA,IAAIQ,kBAAkBrB,MAAMsB,OAAO,CAAC;QAClC,OAAOjB,WACHD,QAASmB,MAAM,CAAC,CAACC,SAAWnB,SAASW,YAAYQ,QAAQlB,mBACxDF;IACP,GAAG;QAACA;QAASC;QAAUW;QAAYV;KAAe;IAElDe,kBAAkBrB,MAAMsB,OAAO,CAC7B,SAASG;QACP,IAAI,CAACJ,gBAAgBK,MAAM,IAAIlB,cAAc;YAC3C,OAAOa;QACT;QAEA,MAAMM,cAAc,IAAIC,IAAIP;QAC5B,MAAMQ,WAAWZ,gBAAgBa,GAAG,CAAC,CAACC,OAASxB,eAAgBwB;QAE/D,KAAK,MAAMA,QAAQJ,YAAa;YAC9B,IAAIE,SAASG,QAAQ,CAACzB,eAAgBwB,QAAQ;gBAC5CJ,YAAYM,MAAM,CAACF;YACrB;QACF;QAEA,OAAO;eAAIJ;SAAY;IACzB,GACA;QAACN;QAAiBJ;QAAiBV;QAAgBC;KAAa;IAGlE,OAAO;QACL,GAAGU,eAAe;QAClBF;QACAG;QACAV;QACAC;QACAW;QACAT;QACAC;QACAC;QACAC;QACAE;IACF;AACF,EAAE"}