{"version":3,"sources":["../../../../src/components/AppRoot/AppRootPortal.tsx"],"sourcesContent":["import * as React from 'react';\nimport { createPortal } from 'react-dom';\nimport { useAppearance } from '../../hooks/useAppearance';\nimport { useIsClient } from '../../hooks/useIsClient';\nimport { isRefObject } from '../../lib/isRefObject';\nimport { HasChildren } from '../../types';\nimport { AppearanceProvider } from '../AppearanceProvider/AppearanceProvider';\nimport { AppRootContext } from './AppRootContext';\n\nexport interface AppRootPortalProps extends HasChildren {\n  className?: string;\n  forcePortal?: boolean;\n  /**\n   * Кастомный root-элемент портала.\n   * При передаче вместе с `forcePorta=true` игнорируется `portalRoot` и `disablePortal`\n   * из контекста `AppRoot`.\n   */\n  portalRoot?: HTMLElement | React.RefObject<HTMLElement> | null;\n}\n\nexport const AppRootPortal = ({\n  children,\n  className,\n  forcePortal: forcePortalProp,\n  portalRoot: portalRootProp = null,\n}: AppRootPortalProps) => {\n  const { portalRoot, mode, disablePortal } = React.useContext(AppRootContext);\n  const appearance = useAppearance();\n\n  const isClient = useIsClient();\n  if (!isClient) {\n    return null;\n  }\n\n  const forcePortal = forcePortalProp ?? mode !== 'full';\n\n  const portalContainer = getPortalContainer(portalRootProp, portalRoot);\n\n  const ignoreDisablePortalFlagFromContext = portalRootProp && forcePortal;\n  const shouldUsePortal = ignoreDisablePortalFlagFromContext\n    ? true\n    : !disablePortal && portalContainer && forcePortal;\n\n  return shouldUsePortal && portalContainer ? (\n    createPortal(\n      <AppearanceProvider appearance={appearance}>\n        <div className={className}>{children}</div>\n      </AppearanceProvider>,\n      portalContainer,\n    )\n  ) : (\n    <React.Fragment>{children}</React.Fragment>\n  );\n};\n\n/**\n * Получает из кастомного пропа `partialRootProp` и `partialRoot` контекста\n * контейнер-элемент для портала.\n * `partialRootProp` может быть ref элементом.\n *\n */\nfunction getPortalContainer(\n  portalRootProp?: HTMLElement | React.RefObject<HTMLElement> | null,\n  portalRoot?: HTMLElement | null,\n) {\n  if (!portalRootProp) {\n    return portalRoot;\n  }\n\n  return isRefObject(portalRootProp) ? portalRootProp.current : portalRootProp;\n}\n"],"names":["React","createPortal","useAppearance","useIsClient","isRefObject","AppearanceProvider","AppRootContext","AppRootPortal","children","className","forcePortal","forcePortalProp","portalRoot","portalRootProp","mode","disablePortal","useContext","appearance","isClient","portalContainer","getPortalContainer","ignoreDisablePortalFlagFromContext","shouldUsePortal","div","Fragment","current"],"mappings":"AAAA,YAAYA,WAAW,QAAQ;AAC/B,SAASC,YAAY,QAAQ,YAAY;AACzC,SAASC,aAAa,QAAQ,4BAA4B;AAC1D,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,WAAW,QAAQ,wBAAwB;AAEpD,SAASC,kBAAkB,QAAQ,2CAA2C;AAC9E,SAASC,cAAc,QAAQ,mBAAmB;AAalD,OAAO,MAAMC,gBAAgB,CAAC,EAC5BC,QAAQ,EACRC,SAAS,EACTC,aAAaC,eAAe,EAC5BC,YAAYC,iBAAiB,IAAI,EACd;IACnB,MAAM,EAAED,UAAU,EAAEE,IAAI,EAAEC,aAAa,EAAE,GAAGf,MAAMgB,UAAU,CAACV;IAC7D,MAAMW,aAAaf;IAEnB,MAAMgB,WAAWf;IACjB,IAAI,CAACe,UAAU;QACb,OAAO;IACT;IAEA,MAAMR,cAAcC,mBAAmBG,SAAS;IAEhD,MAAMK,kBAAkBC,mBAAmBP,gBAAgBD;IAE3D,MAAMS,qCAAqCR,kBAAkBH;IAC7D,MAAMY,kBAAkBD,qCACpB,OACA,CAACN,iBAAiBI,mBAAmBT;IAEzC,OAAOY,mBAAmBH,gCACxBlB,2BACE,oBAACI;QAAmBY,YAAYA;qBAC9B,oBAACM;QAAId,WAAWA;OAAYD,YAE9BW,iCAGF,oBAACnB,MAAMwB,QAAQ,QAAEhB;AAErB,EAAE;AAEF;;;;;CAKC,GACD,SAASY,mBACPP,cAAkE,EAClED,UAA+B;IAE/B,IAAI,CAACC,gBAAgB;QACnB,OAAOD;IACT;IAEA,OAAOR,YAAYS,kBAAkBA,eAAeY,OAAO,GAAGZ;AAChE"}