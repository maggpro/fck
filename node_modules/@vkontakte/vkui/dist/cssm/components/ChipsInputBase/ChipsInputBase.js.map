{"version":3,"sources":["../../../../src/components/ChipsInputBase/ChipsInputBase.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames, noop } from '@vkontakte/vkjs';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { useChipsInput } from '../../hooks/useChipsInput';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { SizeType } from '../../lib/adaptivity';\nimport { HasAlign, HasRef, HasRootRef } from '../../types';\nimport { Chip, ChipOption, ChipValue, RenderChip } from '../Chip/Chip';\nimport { Text } from '../Typography/Text/Text';\nimport styles from './ChipsInputBase.module.css';\n\nexport interface ChipsInputBaseProps<Option extends ChipOption>\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'value' | 'onChange'>,\n    HasRef<HTMLInputElement>,\n    HasRootRef<HTMLDivElement>,\n    HasAlign {\n  value: Option[];\n  inputValue?: string;\n  onChange?: (o: Option[]) => void;\n  onInputChange?: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  getOptionValue?: (o?: Option) => ChipValue;\n  getOptionLabel?: (o?: Option) => string;\n  getNewOptionData?: (v?: ChipValue, l?: string) => Option;\n  renderChip?: (props?: RenderChip<Option>) => React.ReactNode;\n  inputAriaLabel?: string;\n  /**\n   * Добавляет значение в список на событие `onBlur`\n   */\n  addOnBlur?: boolean;\n}\n\nexport const chipsInputDefaultProps: ChipsInputBaseProps<any> = {\n  onChange: noop,\n  onInputChange: noop,\n  onKeyDown: noop,\n  onBlur: noop,\n  onFocus: noop,\n  value: [],\n  inputValue: '',\n  inputAriaLabel: 'Введите ваше значение...',\n  getOptionValue: (option) => option.value,\n  getOptionLabel: (option) => option.label,\n  getNewOptionData: (_, label) => ({\n    value: label,\n    label,\n  }),\n  renderChip(props) {\n    if (!props) {\n      return null;\n    }\n\n    const { disabled, value, label, ...rest } = props;\n    return (\n      <Chip value={value} removable={!disabled} {...rest}>\n        {label}\n      </Chip>\n    );\n  },\n  addOnBlur: false,\n};\n\nexport const ChipsInputBase = <Option extends ChipOption>(props: ChipsInputBaseProps<Option>) => {\n  const propsWithDefault = { ...chipsInputDefaultProps, ...props };\n  const {\n    style,\n    className,\n    getRootRef,\n    value,\n    onChange,\n    onInputChange,\n    onKeyDown,\n    onBlur,\n    onFocus,\n    children,\n    inputValue,\n    getRef,\n    placeholder,\n    getOptionValue,\n    getOptionLabel,\n    getNewOptionData,\n    renderChip,\n    inputAriaLabel,\n    addOnBlur,\n    ...restProps\n  } = propsWithDefault;\n  const { sizeY } = useAdaptivity();\n\n  const [focused, setFocused] = React.useState(false);\n  const { fieldValue, addOptionFromInput, removeOption, selectedOptions, handleInputChange } =\n    useChipsInput(propsWithDefault);\n  const inputRef = useExternRef(getRef);\n\n  const isDisabled = restProps.disabled || restProps.readOnly;\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    onKeyDown!(e);\n\n    if (e.key === 'Backspace' && !e.defaultPrevented && !fieldValue && selectedOptions.length) {\n      removeOption(getOptionValue!(selectedOptions[selectedOptions.length - 1]));\n      e.preventDefault();\n    }\n\n    if (e.key === 'Enter' && !e.defaultPrevented && fieldValue) {\n      addOptionFromInput();\n      e.preventDefault();\n    }\n  };\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    if (focused) {\n      setFocused(false);\n    }\n    onBlur!(e);\n\n    if (addOnBlur && !e.defaultPrevented) {\n      addOptionFromInput();\n    }\n  };\n\n  const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    if (!focused) {\n      setFocused(true);\n    }\n    onFocus!(e);\n  };\n\n  const handleChipRemove = (_: React.MouseEvent | undefined, value: ChipValue | undefined) => {\n    if (value !== undefined) {\n      removeOption(value);\n    }\n  };\n\n  const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (inputRef?.current !== null && !focused) {\n      inputRef.current.focus();\n    }\n  };\n\n  return (\n    <div\n      onClick={handleClick}\n      role=\"presentation\"\n      style={style}\n      className={classNames(\n        styles['ChipsInputBase'],\n        sizeY === SizeType.COMPACT && styles['ChipsInputBase--sizeY-compact'],\n        !selectedOptions.length && styles['ChipsInputBase--hasPlaceholder'],\n        className,\n      )}\n      ref={getRootRef}\n    >\n      {selectedOptions.map((option: Option) => {\n        const value = getOptionValue!(option);\n        const label = getOptionLabel!(option);\n\n        return (\n          <React.Fragment key={`${typeof value}-${value}`}>\n            {renderChip!({\n              option,\n              value,\n              label,\n              onRemove: handleChipRemove,\n              disabled: Boolean(restProps.disabled),\n              className: styles['ChipsInputBase__chip'],\n            })}\n          </React.Fragment>\n        );\n      })}\n      <label className={styles['ChipsInputBase__label']} aria-label={inputAriaLabel}>\n        <Text\n          Component=\"input\"\n          type=\"text\"\n          autoCapitalize=\"none\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          spellCheck={false}\n          aria-autocomplete=\"list\"\n          className={styles['ChipsInputBase__el']}\n          {...restProps}\n          getRootRef={inputRef}\n          value={fieldValue}\n          onChange={handleInputChange}\n          onKeyDown={handleKeyDown}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          placeholder={selectedOptions.length ? undefined : placeholder}\n        />\n      </label>\n    </div>\n  );\n};\n"],"names":["React","classNames","noop","useAdaptivity","useChipsInput","useExternRef","SizeType","Chip","Text","styles","chipsInputDefaultProps","onChange","onInputChange","onKeyDown","onBlur","onFocus","value","inputValue","inputAriaLabel","getOptionValue","option","getOptionLabel","label","getNewOptionData","_","renderChip","props","disabled","rest","removable","addOnBlur","ChipsInputBase","propsWithDefault","style","className","getRootRef","children","getRef","placeholder","restProps","sizeY","focused","setFocused","useState","fieldValue","addOptionFromInput","removeOption","selectedOptions","handleInputChange","inputRef","isDisabled","readOnly","handleKeyDown","e","preventDefault","key","defaultPrevented","length","handleBlur","handleFocus","handleChipRemove","undefined","handleClick","current","focus","div","onClick","role","COMPACT","ref","map","Fragment","onRemove","Boolean","aria-label","Component","type","autoCapitalize","autoComplete","autoCorrect","spellCheck","aria-autocomplete"],"mappings":"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"}