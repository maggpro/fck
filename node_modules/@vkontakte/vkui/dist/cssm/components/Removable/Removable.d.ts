import * as React from 'react';
import { HTMLAttributesWithRootRef } from '../../types';
export interface RemovableProps {
    /**
     * iOS only. Текст в выезжающей кнопке для удаления ячейки.
     */
    removePlaceholder?: React.ReactNode;
    /**
     * Коллбэк срабатывает при клике на контрол удаления.
     */
    onRemove?: (e: React.MouseEvent, rootEl?: HTMLElement | null) => void;
}
interface RemovableIosRenderProps {
    /**
     * Показывает состояние Removable на платформе iOS при клике на иконку удаления.
     * Для имитации поведения на iOS при клике на иконку удаления самого удаление не происходит,
     * контент сдвигается влево и справа выезжает настоящая кнопка "Удалить".
     * Когда контент сдвинут `isRemoving = true`.
     */
    isRemoving: boolean;
}
interface RemovableOwnProps extends HTMLAttributesWithRootRef<HTMLDivElement>, RemovableProps {
    /**
     * Расположение кнопки удаления.
     */
    align?: 'start' | 'center';
    /**
     * Скрывает кнопку, но оставляет отступ.
     * @since 5.4.0
     */
    indent?: boolean;
    children?: React.ReactNode | ((renderProps: RemovableIosRenderProps) => React.ReactNode);
}
/**
 * @see https://vkcom.github.io/VKUI/#/Removable
 */
export declare const Removable: ({ children, onRemove, removePlaceholder, align, indent, ...restProps }: RemovableOwnProps) => React.JSX.Element;
export {};
//# sourceMappingURL=Removable.d.ts.map