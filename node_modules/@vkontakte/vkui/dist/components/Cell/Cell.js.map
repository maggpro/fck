{"version":3,"sources":["../../../src/components/Cell/Cell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames, noop } from '@vkontakte/vkjs';\nimport type { SwappedItemRange } from '../../hooks/useDraggableWithDomApi';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { Platform } from '../../lib/platform';\nimport type { HasRootRef } from '../../types';\nimport { Removable, type RemovableProps } from '../Removable/Removable';\nimport { SimpleCell, type SimpleCellProps } from '../SimpleCell/SimpleCell';\nimport { CellCheckbox, type CellCheckboxProps } from './CellCheckbox/CellCheckbox';\nimport { CellDragger } from './CellDragger/CellDragger';\nimport { DEFAULT_DRAGGABLE_LABEL } from './constants';\nimport styles from './Cell.module.css';\n\nexport interface CellProps\n  extends Omit<SimpleCellProps, 'getRootRef'>,\n    RemovableProps,\n    HasRootRef<HTMLDivElement> {\n  mode?: 'removable' | 'selectable';\n  /**\n   * В режиме перетаскивания ячейка перестает быть кликабельной, то есть при клике переданный onClick вызываться не будет\n   */\n  draggable?: boolean;\n  /**\n   * Имя для input в режиме selectable\n   */\n  name?: string;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса cheсked, как зависящий напрямую от входящего значения\n   */\n  checked?: boolean;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса defaultChecked как неконтролируемый компонент\n   */\n  defaultChecked?: boolean;\n  /**\n   * Коллбэк срабатывает при завершении перетаскивания.\n   * **Важно:** режим перетаскивания не меняет порядок ячеек в DOM. В коллбэке есть объект с полями `from` и `to`.\n   * Эти числа нужны для того, чтобы разработчик понимал, с какого индекса на какой произошел переход. В песочнице\n   * есть рабочий пример с обработкой этих чисел и перерисовкой списка.\n   */\n  onDragFinish?(swappedItemRange: SwappedItemRange): void;\n  /**\n   * aria-label для кнопки перетаскивания ячейки\n   */\n  draggerLabel?: string;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/Cell\n */\nexport const Cell = ({\n  mode,\n  onRemove = noop,\n  removePlaceholder = 'Удалить',\n  onDragFinish,\n  before,\n  after,\n  disabled,\n  draggable,\n  Component: ComponentProps,\n  onChange,\n  name,\n  value,\n  checked,\n  defaultChecked,\n  getRootRef,\n  draggerLabel = DEFAULT_DRAGGABLE_LABEL,\n  className,\n  style,\n  ...restProps\n}: CellProps) => {\n  const [dragging, setDragging] = React.useState(false);\n  const selectable = mode === 'selectable';\n  const removable = mode === 'removable';\n  const Component = selectable ? 'label' : ComponentProps;\n\n  const platform = usePlatform();\n\n  const rootElRef = useExternRef(getRootRef);\n\n  const dragger = draggable ? (\n    <CellDragger\n      elRef={rootElRef}\n      className={styles['Cell__dragger']}\n      aria-label={draggerLabel}\n      disabled={disabled}\n      onDragStateChange={setDragging}\n      onDragFinish={onDragFinish}\n    />\n  ) : null;\n\n  let checkbox;\n  if (selectable) {\n    const checkboxProps: CellCheckboxProps = {\n      name,\n      value,\n      defaultChecked,\n      checked,\n      disabled,\n      onChange,\n    };\n    checkbox = <CellCheckbox className={styles['Cell__checkbox']} {...checkboxProps} />;\n  }\n\n  const simpleCellDisabled =\n    (draggable && !selectable) || (removable && !restProps.onClick) || disabled;\n  const hasActive = !simpleCellDisabled && !dragging;\n\n  const cellClasses = classNames(\n    styles['Cell'],\n    dragging && styles['Cell--dragging'],\n    platform === Platform.IOS && styles['Cell--ios'],\n    removable && styles['Cell--removable'],\n    Component === 'label' && styles['Cell--selectable'],\n    disabled && styles['Cell--disabled'],\n  );\n\n  const simpleCellProps = {\n    hasActive: hasActive,\n    hasHover: hasActive && !removable,\n    ...restProps,\n    className: styles['Cell__content'],\n    disabled: simpleCellDisabled,\n    Component: Component,\n    before: (\n      <React.Fragment>\n        {draggable && platform !== Platform.IOS && dragger}\n        {selectable && checkbox}\n        {before}\n      </React.Fragment>\n    ),\n    after: (\n      <React.Fragment>\n        {draggable && platform === Platform.IOS && dragger}\n        {after}\n      </React.Fragment>\n    ),\n  };\n\n  if (removable) {\n    return (\n      <Removable\n        className={classNames(cellClasses, className)}\n        style={style}\n        getRootRef={rootElRef}\n        removePlaceholder={removePlaceholder}\n        onRemove={(e) => onRemove(e, rootElRef.current)}\n      >\n        {platform === Platform.IOS ? (\n          ({ isRemoving }) => (\n            <SimpleCell {...simpleCellProps} disabled={simpleCellProps.disabled || isRemoving} />\n          )\n        ) : (\n          <SimpleCell {...simpleCellProps} />\n        )}\n      </Removable>\n    );\n  }\n\n  return (\n    <div className={classNames(cellClasses, className)} style={style} ref={rootElRef}>\n      <SimpleCell {...simpleCellProps} />\n    </div>\n  );\n};\n\nCell.Checkbox = CellCheckbox;\n"],"names":["React","classNames","noop","useExternRef","usePlatform","Platform","Removable","SimpleCell","CellCheckbox","CellDragger","DEFAULT_DRAGGABLE_LABEL","Cell","mode","onRemove","removePlaceholder","onDragFinish","before","after","disabled","draggable","Component","ComponentProps","onChange","name","value","checked","defaultChecked","getRootRef","draggerLabel","className","style","restProps","useState","dragging","setDragging","selectable","removable","platform","rootElRef","dragger","elRef","aria-label","onDragStateChange","checkbox","checkboxProps","simpleCellDisabled","onClick","hasActive","cellClasses","IOS","simpleCellProps","hasHover","Fragment","e","current","isRemoving","div","ref","Checkbox"],"mappings":"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"}